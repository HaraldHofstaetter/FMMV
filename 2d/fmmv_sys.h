/* This file is automatically generated by gen_ida.py */
/* DO NOT EDIT! */

#ifndef _FMMV_H_
#define _FMMV_H_

#define FMM_DIM  2

#if (FMM_PRECISION==0)
	typedef float _FLOAT_;
	#define FMM_P_MAX 30
	#define FMM_S_EPS_MAX 30
	#define FMM_S_EXP_MAX 30
	#define FMM_SIMD_VECTOR_LENGTH 1
#elif (FMM_PRECISION==1)
	typedef double _FLOAT_;
	#define FMM_P_MAX 40
	#define FMM_S_EPS_MAX 40
	#define FMM_S_EXP_MAX 40
	#define FMM_SIMD_VECTOR_LENGTH 1
#endif

#define FMM_STANDARD 0

#if (FMM_PRECISION==0)

typedef struct {
	float x;
	float y;
	float q;
	float pot;
} _DATA_standard_V0_t;

typedef struct {
	_DATA_standard_V0_t *_0; /* x , y , q , pot  */
} DATA_standard_t;

#elif (FMM_PRECISION==1)

typedef struct {
	double x;
	double y;
	double q;
	double pot;
} _DATA_standard_V0_t;

typedef struct {
	_DATA_standard_V0_t *_0; /* x , y , q , pot  */
} DATA_standard_t;
#endif



#define FMM_DIPOLE 1

#if (FMM_PRECISION==0)

typedef struct {
	float x;
	float y;
	float q;
	float mx;
	float my;
	float pot;
} _DATA_dipole_V0_t;

typedef struct {
	_DATA_dipole_V0_t *_0; /* x , y , q , mx , my , pot  */
} DATA_dipole_t;

#elif (FMM_PRECISION==1)

typedef struct {
	double x;
	double y;
	double q;
	double mx;
	double my;
	double pot;
} _DATA_dipole_V0_t;

typedef struct {
	_DATA_dipole_V0_t *_0; /* x , y , q , mx , my , pot  */
} DATA_dipole_t;
#endif



#define FMM_GRAD 2

#if (FMM_PRECISION==0)

typedef struct {
	float x;
	float y;
	float q;
	float pot;
	float gradx;
	float grady;
} _DATA_grad_V0_t;

typedef struct {
	_DATA_grad_V0_t *_0; /* x , y , q , pot , gradx , grady  */
} DATA_grad_t;

#elif (FMM_PRECISION==1)

typedef struct {
	double x;
	double y;
	double q;
	double pot;
	double gradx;
	double grady;
} _DATA_grad_V0_t;

typedef struct {
	_DATA_grad_V0_t *_0; /* x , y , q , pot , gradx , grady  */
} DATA_grad_t;
#endif



#define FMM_DIPOLE_GRAD 3

#if (FMM_PRECISION==0)

typedef struct {
	float x;
	float y;
	float q;
	float mx;
	float my;
	float pot;
	float gradx;
	float grady;
} _DATA_dipole_grad_V0_t;

typedef struct {
	_DATA_dipole_grad_V0_t *_0; /* x , y , q , mx , my , pot , gradx , grady  */
} DATA_dipole_grad_t;

#elif (FMM_PRECISION==1)

typedef struct {
	double x;
	double y;
	double q;
	double mx;
	double my;
	double pot;
	double gradx;
	double grady;
} _DATA_dipole_grad_V0_t;

typedef struct {
	_DATA_dipole_grad_V0_t *_0; /* x , y , q , mx , my , pot , gradx , grady  */
} DATA_dipole_grad_t;
#endif



#define FMM_ST_STANDARD 4

#if (FMM_PRECISION==0)

typedef struct {
	float x;
	float y;
	float q;
} _DATA_standard_ST_V0_t;

typedef struct {
	float tx;
	float ty;
	float pot;
} _DATA_standard_ST_V1_t;

typedef struct {
	_DATA_standard_ST_V0_t *_0; /* x , y , q  */
	_DATA_standard_ST_V1_t *_1; /* tx , ty , pot  */
} DATA_standard_ST_t;

#elif (FMM_PRECISION==1)

typedef struct {
	double x;
	double y;
	double q;
} _DATA_standard_ST_V0_t;

typedef struct {
	double tx;
	double ty;
	double pot;
} _DATA_standard_ST_V1_t;

typedef struct {
	_DATA_standard_ST_V0_t *_0; /* x , y , q  */
	_DATA_standard_ST_V1_t *_1; /* tx , ty , pot  */
} DATA_standard_ST_t;
#endif



#define FMM_ST_DIPOLE 5

#if (FMM_PRECISION==0)

typedef struct {
	float x;
	float y;
	float q;
	float mx;
	float my;
} _DATA_dipole_ST_V0_t;

typedef struct {
	float tx;
	float ty;
	float pot;
} _DATA_dipole_ST_V1_t;

typedef struct {
	_DATA_dipole_ST_V0_t *_0; /* x , y , q , mx , my  */
	_DATA_dipole_ST_V1_t *_1; /* tx , ty , pot  */
} DATA_dipole_ST_t;

#elif (FMM_PRECISION==1)

typedef struct {
	double x;
	double y;
	double q;
	double mx;
	double my;
} _DATA_dipole_ST_V0_t;

typedef struct {
	double tx;
	double ty;
	double pot;
} _DATA_dipole_ST_V1_t;

typedef struct {
	_DATA_dipole_ST_V0_t *_0; /* x , y , q , mx , my  */
	_DATA_dipole_ST_V1_t *_1; /* tx , ty , pot  */
} DATA_dipole_ST_t;
#endif



#define FMM_ST_GRAD 6

#if (FMM_PRECISION==0)

typedef struct {
	float x;
	float y;
	float q;
} _DATA_grad_ST_V0_t;

typedef struct {
	float tx;
	float ty;
	float pot;
	float gradx;
	float grady;
} _DATA_grad_ST_V1_t;

typedef struct {
	_DATA_grad_ST_V0_t *_0; /* x , y , q  */
	_DATA_grad_ST_V1_t *_1; /* tx , ty , pot , gradx , grady  */
} DATA_grad_ST_t;

#elif (FMM_PRECISION==1)

typedef struct {
	double x;
	double y;
	double q;
} _DATA_grad_ST_V0_t;

typedef struct {
	double tx;
	double ty;
	double pot;
	double gradx;
	double grady;
} _DATA_grad_ST_V1_t;

typedef struct {
	_DATA_grad_ST_V0_t *_0; /* x , y , q  */
	_DATA_grad_ST_V1_t *_1; /* tx , ty , pot , gradx , grady  */
} DATA_grad_ST_t;
#endif



#define FMM_ST_DIPOLE_GRAD 7

#if (FMM_PRECISION==0)

typedef struct {
	float x;
	float y;
	float q;
	float mx;
	float my;
} _DATA_dipole_grad_ST_V0_t;

typedef struct {
	float tx;
	float ty;
	float pot;
	float gradx;
	float grady;
} _DATA_dipole_grad_ST_V1_t;

typedef struct {
	_DATA_dipole_grad_ST_V0_t *_0; /* x , y , q , mx , my  */
	_DATA_dipole_grad_ST_V1_t *_1; /* tx , ty , pot , gradx , grady  */
} DATA_dipole_grad_ST_t;

#elif (FMM_PRECISION==1)

typedef struct {
	double x;
	double y;
	double q;
	double mx;
	double my;
} _DATA_dipole_grad_ST_V0_t;

typedef struct {
	double tx;
	double ty;
	double pot;
	double gradx;
	double grady;
} _DATA_dipole_grad_ST_V1_t;

typedef struct {
	_DATA_dipole_grad_ST_V0_t *_0; /* x , y , q , mx , my  */
	_DATA_dipole_grad_ST_V1_t *_1; /* tx , ty , pot , gradx , grady  */
} DATA_dipole_grad_ST_t;
#endif



#define FMM_ADDITIONAL_DATA_IN_BOX\

#define FMM_ADDITIONAL_GLOBAL_DATA\
	_FLOAT_ (*dipoleMoments)[2];\
	_FLOAT_ *charges;\
	_FLOAT_ *potentials;\
	_FLOAT_ (*gradients)[2];\
	_FLOAT_ beta;	\
	_FLOAT_ *recip;	\
	_FLOAT_ *lambda;	\
	_FLOAT_ *w;	\
	_FLOAT_ *A[FMM_P_MAX+2];	\
	_FLOAT_ *Ac[FMM_P_MAX+2];	\
	_FLOAT_ *vander_over_fact[FMM_S_EXP_MAX];	\
	_FLOAT_ C;	\
	_FLOAT_ k0_correction;	\
	double *FF;	\
	double *FF_INV;	\

#include"fmmv2d.h"
#include"fmmv_common.h"
#if (FMM_PRECISION==0)
#elif (FMM_PRECISION==1)
#endif /* FMM_PRECISION */

void gen_M_standard(FmmvHandle *FMMV, Box *box);
void gen_M_dipole(FmmvHandle *FMMV, Box *box);
void gen_M_grad(FmmvHandle *FMMV, Box *box);
void gen_M_dipole_grad(FmmvHandle *FMMV, Box *box);
void gen_M_ST_standard(FmmvHandle *FMMV, Box *box);
void gen_M_ST_dipole(FmmvHandle *FMMV, Box *box);
void gen_M_ST_grad(FmmvHandle *FMMV, Box *box);
void gen_M_ST_dipole_grad(FmmvHandle *FMMV, Box *box);
void eval_L_standard(FmmvHandle *FMMV, Box *box);
void eval_L_dipole(FmmvHandle *FMMV, Box *box);
void eval_L_grad(FmmvHandle *FMMV, Box *box);
void eval_L_dipole_grad(FmmvHandle *FMMV, Box *box);
void eval_L_ST_standard(FmmvHandle *FMMV, Box *box);
void eval_L_ST_dipole(FmmvHandle *FMMV, Box *box);
void eval_L_ST_grad(FmmvHandle *FMMV, Box *box);
void eval_L_ST_dipole_grad(FmmvHandle *FMMV, Box *box);
void eval_M_standard(FmmvHandle *FMMV, Box *target, Box *source);
void eval_M_dipole(FmmvHandle *FMMV, Box *target, Box *source);
void eval_M_grad(FmmvHandle *FMMV, Box *target, Box *source);
void eval_M_dipole_grad(FmmvHandle *FMMV, Box *target, Box *source);
void eval_M_ST_standard(FmmvHandle *FMMV, Box *target, Box *source);
void eval_M_ST_dipole(FmmvHandle *FMMV, Box *target, Box *source);
void eval_M_ST_grad(FmmvHandle *FMMV, Box *target, Box *source);
void eval_M_ST_dipole_grad(FmmvHandle *FMMV, Box *target, Box *source);
void gen_L_standard(FmmvHandle *FMMV, Box *target, Box *source);
void gen_L_dipole(FmmvHandle *FMMV, Box *target, Box *source);
void gen_L_grad(FmmvHandle *FMMV, Box *target, Box *source);
void gen_L_dipole_grad(FmmvHandle *FMMV, Box *target, Box *source);
void gen_L_ST_standard(FmmvHandle *FMMV, Box *target, Box *source);
void gen_L_ST_dipole(FmmvHandle *FMMV, Box *target, Box *source);
void gen_L_ST_grad(FmmvHandle *FMMV, Box *target, Box *source);
void gen_L_ST_dipole_grad(FmmvHandle *FMMV, Box *target, Box *source);
void gen_L_eval_M_standard(FmmvHandle *FMMV, Box *list3, Box *list4);
void gen_L_eval_M_dipole(FmmvHandle *FMMV, Box *list3, Box *list4);
void gen_L_eval_M_grad(FmmvHandle *FMMV, Box *list3, Box *list4);
void gen_L_eval_M_dipole_grad(FmmvHandle *FMMV, Box *list3, Box *list4);
void extrinsic_correction_standard(FmmvHandle *FMMV);
void extrinsic_correction_dipole(FmmvHandle *FMMV);
void extrinsic_correction_grad(FmmvHandle *FMMV);
void extrinsic_correction_dipole_grad(FmmvHandle *FMMV);
void extrinsic_correction_ST_standard(FmmvHandle *FMMV);
void extrinsic_correction_ST_dipole(FmmvHandle *FMMV);
void extrinsic_correction_ST_grad(FmmvHandle *FMMV);
void extrinsic_correction_ST_dipole_grad(FmmvHandle *FMMV);
void eval_direct_standard_acc0(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_standard_acc1(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_standard_acc2(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_dipole_acc0(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_dipole_acc1(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_dipole_acc2(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_grad_acc0(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_grad_acc1(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_grad_acc2(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_dipole_grad_acc0(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_dipole_grad_acc1(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_dipole_grad_acc2(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_ST_standard_acc0(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_ST_standard_acc1(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_ST_standard_acc2(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_ST_dipole_acc0(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_ST_dipole_acc1(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_ST_dipole_acc2(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_ST_grad_acc0(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_ST_grad_acc1(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_ST_grad_acc2(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_ST_dipole_grad_acc0(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_ST_dipole_grad_acc1(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_ST_dipole_grad_acc2(FmmvHandle *FMMV, Box *target, Box *source);
void eval_direct_periodic_standard_acc0(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_standard_acc1(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_standard_acc2(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_dipole_acc0(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_dipole_acc1(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_dipole_acc2(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_grad_acc0(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_grad_acc1(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_grad_acc2(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_dipole_grad_acc0(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_dipole_grad_acc1(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_dipole_grad_acc2(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_ST_standard_acc0(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_ST_standard_acc1(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_ST_standard_acc2(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_ST_dipole_acc0(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_ST_dipole_acc1(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_ST_dipole_acc2(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_ST_grad_acc0(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_ST_grad_acc1(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_ST_grad_acc2(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_ST_dipole_grad_acc0(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_ST_dipole_grad_acc1(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
void eval_direct_periodic_ST_dipole_grad_acc2(FmmvHandle *FMMV, Box *target, Box *source, _FLOAT_ dx, _FLOAT_ dy);
#endif /* _FMMV_H_ */
