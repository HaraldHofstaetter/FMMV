# FMMV - the Fastest Multipole Method of Vienna
# Copyright (c) 2006-2015 Harald Hofstaetter
# http://www.harald-hofstaetter.at
#
# This file is part of FMMV.
#
# FMMV is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# FMMV is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with FMMV; if not, write to the Free Software  Foundation, Inc.,
# 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

def gen_tables(suf, type):
	M_list = [2, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]
	for (name, pars) in [
		("FFT_M2X%s", "_FLOAT_ *x, _FLOAT_ *y"),
		("FFT_X2L%s", "_FLOAT_ *x, _FLOAT_ *y"),
		("FFT_M2X%s_prepare", "_FLOAT_ *x, _FLOAT_ *y, %s *s" % type),
		("FFT_M2X%s_finish", "_FLOAT_ *y, %s s" % type),
		("FFT_X2L%s_prepare", "_FLOAT_ *y, %s *s" % type),
		("FFT_X2L%s_finish", "_FLOAT_ *x, _FLOAT_ *y, %s s" % type)]:
		name1 = (name % "_%i") + suf

		for j in M_list:
			print "void %s(%s);" % (name1 % j, pars)
		print
		print "static void (*%s%s[])(%s) = {" % (name % "", suf, pars)
		for j in range(0, max(M_list)+1, 2):
			if j in M_list:
				print "\t%s,"% (name1 % j)
			else:
				print "\t0, /* %i */" %j
		print "};"
		print 

print '''
/* This file is automatically generated by gen_FFT_M2X_X2L_tables.py */
/* DO NOT EDIT! */

'''
from gen_straightline_code import templates
import sys

if len(sys.argv)>1:
	par = sys.argv[1]
	print '#include "simd.h"'
	print "#if (FMM_PRECISION==0)"
        print '   #include"%ss.h"' % par
        print "#else"
        print '   #include"%sd.h"' % par
        print "#endif"
	suf = "_"+par
        type = templates[par]["type"]
else:
	suf = ""
    	type = templates["generic"]["type"]

gen_tables(suf, type)


